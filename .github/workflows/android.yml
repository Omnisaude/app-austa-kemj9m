name: Android CI/CD Pipeline

on:
  push:
    branches: [ main, develop, 'release/*' ]
    paths: [ 'src/android/**' ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]
    paths: [ 'src/android/**' ]
  workflow_dispatch:
    inputs:
      environment:
        type: choice
        description: 'Deployment target environment'
        options: [ beta, production ]
        required: true
      percentage:
        type: number
        description: 'Phased rollout percentage'
        default: 10
        required: true

concurrency:
  group: android-${{ github.ref }}
  cancel-in-progress: true

env:
  JAVA_VERSION: '17'
  GRADLE_VERSION: '8.1.0'
  RUBY_VERSION: '3.2'
  MIN_TEST_COVERAGE: '85'
  MAX_BUILD_TIME: '20'
  ARTIFACT_RETENTION_DAYS: '30'

jobs:
  security_scan:
    name: HIPAA Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: ${{ env.MAX_BUILD_TIME }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}
          cache: 'gradle'
          
      - name: Cache Gradle dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: gradle-${{ runner.os }}-
          
      - name: Run dependency vulnerability scan
        run: ./gradlew dependencyCheckAnalyze
        
      - name: Run OWASP security scan
        uses: android-security-scan@v2
        with:
          scan-type: 'full'
          fail-on-high: true
          hipaa-compliance: true
          
      - name: Verify code signing configuration
        run: |
          echo "${{ secrets.KEYSTORE_FILE }}" > keystore.jks.asc
          gpg -d --passphrase "${{ secrets.KEYSTORE_PASSWORD }}" --batch keystore.jks.asc > app/keystore/release.keystore
          
      - name: Upload security reports
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: build/reports/security/
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}

  test:
    name: Test Suite
    needs: security_scan
    runs-on: ubuntu-latest
    timeout-minutes: ${{ env.MAX_BUILD_TIME }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}
          cache: 'gradle'
          
      - name: Setup Ruby for Fastlane
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
          bundler-cache: true
          
      - name: Run unit tests
        run: bundle exec fastlane test
        env:
          GRADLE_OPTS: "-Dorg.gradle.jvmargs=-Xmx4g -XX:MaxMetaspaceSize=2g"
          
      - name: Run instrumented tests
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 29
          arch: x86_64
          profile: pixel_4
          script: ./gradlew connectedCheck
          
      - name: Verify test coverage
        run: |
          COVERAGE=$(./gradlew jacocoTestReport | grep "Total coverage:" | awk '{print $3}' | sed 's/%//')
          if (( $(echo "$COVERAGE < ${{ env.MIN_TEST_COVERAGE }}" | bc -l) )); then
            echo "Test coverage ($COVERAGE%) below minimum threshold (${{ env.MIN_TEST_COVERAGE }}%)"
            exit 1
          fi
          
      - name: Upload test results
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: |
            app/build/reports/tests/
            app/build/reports/androidTests/
            app/build/reports/coverage/
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}

  beta:
    name: Beta Deployment
    if: github.event_name == 'push' && (github.ref == 'refs/heads/develop' || startsWith(github.ref, 'refs/heads/release/'))
    needs: [security_scan, test]
    runs-on: ubuntu-latest
    environment: beta
    timeout-minutes: ${{ env.MAX_BUILD_TIME }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup environment
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}
          
      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
          bundler-cache: true
          
      - name: Configure signing
        run: |
          echo "${{ secrets.KEYSTORE_FILE }}" > keystore.jks.asc
          gpg -d --passphrase "${{ secrets.KEYSTORE_PASSWORD }}" --batch keystore.jks.asc > app/keystore/release.keystore
          
      - name: Deploy to Firebase
        run: bundle exec fastlane beta
        env:
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
          HIPAA_COMPLIANCE_KEY: ${{ secrets.HIPAA_COMPLIANCE_KEY }}

  deploy:
    name: Production Deployment
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
    needs: [security_scan, test]
    runs-on: ubuntu-latest
    environment: production
    timeout-minutes: ${{ env.MAX_BUILD_TIME }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Setup environment
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}
          
      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
          bundler-cache: true
          
      - name: Configure signing
        run: |
          echo "${{ secrets.KEYSTORE_FILE }}" > keystore.jks.asc
          gpg -d --passphrase "${{ secrets.KEYSTORE_PASSWORD }}" --batch keystore.jks.asc > app/keystore/release.keystore
          
      - name: Deploy to Play Store
        run: bundle exec fastlane deploy
        env:
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
          PLAY_STORE_JSON_KEY: ${{ secrets.PLAY_STORE_JSON_KEY }}
          HIPAA_COMPLIANCE_KEY: ${{ secrets.HIPAA_COMPLIANCE_KEY }}
          ROLLOUT_PERCENTAGE: ${{ github.event.inputs.percentage || 10 }}