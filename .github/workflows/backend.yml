name: Backend CI/CD Pipeline

on:
  push:
    branches: [main, develop]
    paths: ['src/backend/**']
  pull_request:
    branches: [main, develop]
    paths: ['src/backend/**']

env:
  NODE_ENV: production
  DOCKER_REGISTRY: ${{ secrets.DOCKER_REGISTRY }}
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  packages: write
  security-events: write
  id-token: write

jobs:
  test:
    name: Test and Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3.5.3
        with:
          fetch-depth: 0
          lfs: true

      - name: Setup Node.js
        uses: actions/setup-node@v3.7.0
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd src/backend
          npm ci --workspace-root
          
      - name: Run linting
        run: |
          cd src/backend
          npm run lint --workspace-root

      - name: Run tests with coverage
        run: |
          cd src/backend
          npm run test:coverage --workspace-root

  security-scan:
    name: Security and Compliance Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3.5.3

      - name: SonarQube analysis
        uses: sonarsource/sonarqube-scan-action@v1.2.0
        with:
          args: >
            -Dsonar.projectKey=austa-backend
            -Dsonar.sources=src/backend
            -Dsonar.tests=src/backend/**/__tests__
            -Dsonar.test.inclusions=**/*.spec.ts,**/*.test.ts
            -Dsonar.typescript.lcov.reportPaths=src/backend/coverage/lcov.info
            -Dsonar.coverage.exclusions=**/*.test.ts,**/*.spec.ts,**/__tests__/**

      - name: Container vulnerability scan
        uses: aquasecurity/trivy-action@0.11.2
        with:
          scan-type: 'fs,vuln'
          severity: 'HIGH,CRITICAL'
          format: 'sarif'
          output: 'trivy-results.sarif'
          ignore-unfixed: true
          vuln-type: 'os,library'
          path: 'src/backend'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'
          category: 'Trivy'

      - name: Generate SBOM
        uses: anchore/sbom-action@v0.14.3
        with:
          format: 'spdx'
          artifact-name: 'sbom.spdx'
          path: 'src/backend'

  build-and-push:
    name: Build and Push Images
    needs: [test, security-scan]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [api-gateway, auth-service, virtual-care-service, health-records-service, claims-service, marketplace-service]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3.5.3

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v2.9.1
        with:
          buildkitd-flags: --debug

      - name: Login to Docker Registry
        uses: docker/login-action@v2.2.0
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ env.DOCKER_PASSWORD }}

      - name: Build and push microservice
        uses: docker/build-push-action@v4.1.1
        with:
          context: ./src/backend
          file: ./src/backend/Dockerfile
          push: true
          tags: |
            ${{ env.DOCKER_REGISTRY }}/${{ matrix.service }}:${{ github.sha }}
            ${{ env.DOCKER_REGISTRY }}/${{ matrix.service }}:latest
          build-args: |
            SERVICE=${{ matrix.service }}
            NODE_ENV=production
          cache-from: type=registry,ref=${{ env.DOCKER_REGISTRY }}/${{ matrix.service }}:buildcache
          cache-to: type=registry,ref=${{ env.DOCKER_REGISTRY }}/${{ matrix.service }}:buildcache,mode=max
          platforms: linux/amd64,linux/arm64
          target: production
          labels: |
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ steps.prep.outputs.created }}
            com.austa.service.name=${{ matrix.service }}