# Fastfile for AUSTA SuperApp Android
# Version: 2.216.0
# Purpose: Define automated build, test, and deployment lanes with comprehensive security controls

# Import required plugins
fastlane_require 'fastlane-plugin-gradle'
fastlane_require 'fastlane-plugin-firebase_app_distribution'
fastlane_require 'fastlane-plugin-automated_test_emulator_run'

# Import application configuration
import('Appfile')

# Minimum Fastlane version enforcement
fastlane_version '2.216.0'

# Default platform configuration
default_platform(:android)

# Platform-specific configuration
platform :android do
  # Environment-specific constants
  GRADLE_PATH = './gradlew'
  RELEASE_STORE_FILE = 'keystore/release.keystore'
  FIREBASE_APP_ID = ENV['FIREBASE_APP_ID'] || '1:123456789:android:abcdef123456789'
  MAX_RETRY_COUNT = 3
  PARALLEL_TESTING = true
  SECURITY_SCAN_ENABLED = true

  # Before all actions
  before_all do |lane, options|
    # Validate environment and security prerequisites
    validate_environment
    ensure_git_status_clean
    verify_build_environment
  end

  # Primary test lane
  desc 'Execute comprehensive test suite with security scans'
  lane :test do |options|
    # Clean build environment
    gradle(task: 'clean')

    # Execute unit tests in parallel
    gradle(
      task: 'test',
      flags: '--parallel',
      properties: {
        'testCoverage': 'true',
        'parallelExecution': PARALLEL_TESTING
      }
    )

    # Run instrumented tests
    automated_test_emulator_run(
      package_name: package_name,
      test_instrumentation_runner: 'androidx.test.runner.AndroidJUnitRunner',
      gradle_task: 'connectedAndroidTest',
      retry_count: MAX_RETRY_COUNT
    )

    # Security vulnerability scan
    if SECURITY_SCAN_ENABLED
      gradle(task: 'dependencyCheckAnalyze')
      gradle(task: 'lint')
    end

    # Generate test reports
    gradle(task: 'jacocoTestReport')

    # Upload test artifacts
    upload_test_artifacts
  end

  # Beta deployment lane
  desc 'Deploy beta version to Firebase App Distribution'
  lane :beta do |options|
    # Increment version code
    increment_version_code

    # Build beta APK with security checks
    gradle(
      task: 'clean assembleBeta',
      properties: {
        'android.injected.signing.store.file': RELEASE_STORE_FILE,
        'android.injected.signing.store.password': ENV['KEYSTORE_PASSWORD'],
        'android.injected.signing.key.alias': ENV['KEY_ALIAS'],
        'android.injected.signing.key.password': ENV['KEY_PASSWORD'],
        'minifyEnabled': true,
        'shrinkResources': true
      }
    )

    # Upload to Firebase with access controls
    firebase_app_distribution(
      app: FIREBASE_APP_ID,
      groups: "beta-testers",
      release_notes: generate_changelog,
      firebase_cli_token: ENV['FIREBASE_TOKEN'],
      apk_path: lane_context[SharedValues::GRADLE_APK_OUTPUT_PATH]
    )

    # Generate audit trail
    create_deployment_audit('beta')
  end

  # Production deployment lane
  desc 'Deploy production release to Play Store'
  lane :deploy do |options|
    # Validate release prerequisites
    ensure_release_ready

    # Build release bundle
    gradle(
      task: 'clean bundleRelease',
      properties: {
        'android.injected.signing.store.file': RELEASE_STORE_FILE,
        'android.injected.signing.store.password': ENV['KEYSTORE_PASSWORD'],
        'android.injected.signing.key.alias': ENV['KEY_ALIAS'],
        'android.injected.signing.key.password': ENV['KEY_PASSWORD']
      }
    )

    # Upload to Play Store
    upload_to_play_store(
      track: 'production',
      release_status: 'draft',
      aab: lane_context[SharedValues::GRADLE_AAB_OUTPUT_PATH],
      skip_upload_metadata: false,
      skip_upload_images: false,
      skip_upload_screenshots: false,
      rollout: 0.1 # 10% initial rollout
    )

    # Create git release
    create_git_release
  end

  # Screenshot capture lane
  desc 'Capture localized screenshots'
  lane :screenshots do |options|
    # Build screenshot APK
    gradle(
      task: 'clean assembleDebug assembleAndroidTest',
      flags: '--stacktrace'
    )

    # Capture screenshots
    capture_android_screenshots(
      locales: screengrab_config[:locales],
      clear_previous_screenshots: true,
      app_package_name: package_name,
      tests_package_name: "#{package_name}.test",
      use_tests_in_classes: ['com.austa.superapp.screenshots.*'],
      app_apk_path: lane_context[SharedValues::GRADLE_APK_OUTPUT_PATH],
      tests_apk_path: lane_context[SharedValues::GRADLE_TEST_APK_OUTPUT_PATH]
    )

    # Process screenshots
    process_screenshots
  end

  # Error handling
  error do |lane, exception, options|
    # Notify team of failure
    notify_failure(lane, exception)
    
    # Clean up resources
    cleanup_build_artifacts
  end

  # Private helper methods
  private_lane :validate_environment do |options|
    UI.user_error!("Missing required credentials") unless ENV['KEYSTORE_PASSWORD'] && ENV['KEY_PASSWORD']
    UI.user_error!("Invalid keystore file") unless File.exist?(RELEASE_STORE_FILE)
  end

  private_lane :ensure_release_ready do |options|
    validate_environment
    ensure_git_branch(branch: 'main')
    ensure_git_status_clean
    verify_changelog_exists
  end

  private_lane :create_deployment_audit do |deployment_type|
    File.write(
      "fastlane/deployment_audit_#{Time.now.strftime('%Y%m%d_%H%M%S')}.log",
      "Deployment type: #{deployment_type}\nVersion: #{lane_context[SharedValues::VERSION_NUMBER]}\nBuild: #{lane_context[SharedValues::BUILD_NUMBER]}\nTimestamp: #{Time.now}"
    )
  end

  private_lane :process_screenshots do |options|
    # Optimize screenshots
    Dir.glob("fastlane/metadata/android/*/images/*.png").each do |screenshot|
      optimize_image(screenshot)
    end
  end

  private_lane :notify_failure do |lane, exception|
    # Implementation depends on notification service
    UI.error("Lane #{lane} failed with error: #{exception}")
  end
end