apiVersion: apps/v1
kind: Deployment
metadata:
  name: claims-service
  namespace: austa
  labels:
    app: austa-superapp
    service: claims
    tier: backend
    environment: production
  annotations:
    kubernetes.io/change-cause: "Initial production deployment"
    prometheus.io/scrape: "true"
    prometheus.io/port: "3003"
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: austa-superapp
      service: claims
  template:
    metadata:
      labels:
        app: austa-superapp
        service: claims
        tier: backend
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3003"
        checksum/config: "${CONFIG_CHECKSUM}"
    spec:
      serviceAccountName: claims-service-sa
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 2000
        readOnlyRootFilesystem: true
      containers:
      - name: claims-service
        image: austa-superapp/claims-service:${VERSION}
        imagePullPolicy: Always
        ports:
        - containerPort: 3003
          name: http
          protocol: TCP
        - containerPort: 9090
          name: metrics
          protocol: TCP
        resources:
          requests:
            cpu: "200m"
            memory: "256Mi"
          limits:
            cpu: "500m"
            memory: "512Mi"
        livenessProbe:
          httpGet:
            path: /health
            port: 3003
          initialDelaySeconds: 30
          periodSeconds: 15
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 3003
          initialDelaySeconds: 20
          periodSeconds: 10
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /health
            port: 3003
          initialDelaySeconds: 10
          periodSeconds: 5
          failureThreshold: 30
        env:
        - name: NODE_ENV
          value: "production"
        - name: PORT
          value: "3003"
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        envFrom:
        - configMapRef:
            name: austa-superapp-config
        - secretRef:
            name: austa-superapp-secrets
        volumeMounts:
        - name: claims-data
          mountPath: /app/data
          readOnly: false
        - name: claims-config
          mountPath: /app/config
          readOnly: true
        - name: tmp
          mountPath: /tmp
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
      volumes:
      - name: claims-data
        persistentVolumeClaim:
          claimName: claims-pvc
      - name: claims-config
        configMap:
          name: austa-superapp-config
      - name: tmp
        emptyDir: {}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: service
                  operator: In
                  values:
                  - claims
              topologyKey: kubernetes.io/hostname
      terminationGracePeriodSeconds: 60
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
      - key: "node.kubernetes.io/not-ready"
        operator: "Exists"
        effect: "NoExecute"
        tolerationSeconds: 300
      - key: "node.kubernetes.io/unreachable"
        operator: "Exists"
        effect: "NoExecute"
        tolerationSeconds: 300