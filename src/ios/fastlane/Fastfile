# fastlane 2.217.0
# frozen_string_literal: true

default_platform(:ios)

# Import required fastlane actions
require 'fastlane'

# Security and compliance constants
SECURITY_SCAN_TIMEOUT = 3600
COMPLIANCE_CHECK_TIMEOUT = 1800
CERTIFICATE_ROTATION_DAYS = 30
MIN_TEST_COVERAGE = 85

# Workspace and scheme configuration
WORKSPACE = "AUSTASuperApp.xcworkspace"
SCHEME = "AUSTASuperApp"

# Security-enhanced platform configuration
platform :ios do
  before_all do |lane, options|
    # Verify environment security
    ensure_security_context
    
    # Validate certificates and profiles
    verify_certificates_validity
    
    # Configure secure build environment
    setup_secure_build_environment
  end

  # Enhanced security verification
  desc "Verify security context and certificates"
  private_lane :ensure_security_context do
    # Validate environment variables
    validate_required_env_vars([
      "APPLE_ID",
      "TEAM_ID",
      "MATCH_PASSWORD",
      "FASTLANE_PASSWORD"
    ])

    # Verify keychain security
    setup_jenkins if is_ci
    create_secure_keychain(
      name: "build_keychain",
      password: ENV["KEYCHAIN_PASSWORD"],
      timeout: 3600,
      lock_when_sleeps: true
    )
  end

  # Certificate management with enhanced security
  desc "Setup and verify certificates"
  private_lane :verify_certificates_validity do
    match(
      type: "appstore",
      readonly: true,
      force_for_new_devices: true,
      verbose: true,
      app_identifier: CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier),
      git_url: ENV["MATCH_GIT_URL"],
      keychain_name: "build_keychain",
      keychain_password: ENV["KEYCHAIN_PASSWORD"],
      api_key_path: ENV["APP_STORE_CONNECT_API_KEY_PATH"]
    )
  end

  # Secure build environment setup
  desc "Configure secure build environment"
  private_lane :setup_secure_build_environment do
    # Update CocoaPods securely
    cocoapods(
      clean_install: true,
      repo_update: true,
      use_bundle_exec: true
    )
    
    # Clear derived data
    clear_derived_data
    
    # Verify Xcode security settings
    verify_xcode_security
  end

  # Comprehensive test suite with security validation
  desc "Run tests with security validation"
  lane :test do
    # Security scan
    scan(
      workspace: WORKSPACE,
      scheme: SCHEME,
      device: "iPhone 14",
      clean: true,
      code_coverage: true,
      concurrent_workers: 2,
      output_directory: "test_output",
      output_types: "html,junit",
      fail_build: true
    )

    # Security compliance validation
    validate_security_compliance

    # Coverage verification
    verify_test_coverage
  end

  # Secure beta deployment
  desc "Deploy beta build to TestFlight"
  lane :beta do
    # Increment build number securely
    increment_build_number(
      build_number: number_of_commits,
      xcodeproj: "AUSTASuperApp.xcodeproj"
    )

    # Security validation
    validate_security_compliance
    
    # Secure build process
    build_secure_ipa(
      workspace: WORKSPACE,
      scheme: SCHEME,
      export_method: "app-store",
      export_options: {
        provisioningProfiles: {
          CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier) => ENV["PROVISIONING_PROFILE_NAME"]
        }
      }
    )

    # Upload to TestFlight with security checks
    upload_to_testflight(
      skip_waiting_for_build_processing: true,
      apple_id: CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier),
      api_key_path: ENV["APP_STORE_CONNECT_API_KEY_PATH"],
      distribute_external: false,
      notify_external_testers: false,
      changelog: read_changelog
    )
  end

  # Production release with enhanced security
  desc "Deploy to App Store with full compliance checks"
  lane :release do
    # Full compliance verification
    verify_full_compliance
    
    # Version management
    increment_version_number(
      version_number: ENV["VERSION_NUMBER"]
    )

    # Security-enhanced build
    build_secure_ipa(
      workspace: WORKSPACE,
      scheme: SCHEME,
      export_method: "app-store",
      export_options: {
        provisioningProfiles: {
          CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier) => ENV["PROVISIONING_PROFILE_NAME"]
        }
      }
    )

    # Secure App Store upload
    upload_to_app_store(
      force: true,
      skip_metadata: false,
      skip_screenshots: false,
      api_key_path: ENV["APP_STORE_CONNECT_API_KEY_PATH"],
      precheck_include_in_app_purchases: true,
      submission_information: {
        add_id_info_uses_idfa: false,
        add_id_info_serves_ads: false,
        add_id_info_tracks_install: true,
        add_id_info_tracks_action: true,
        export_compliance_platform: 'ios',
        export_compliance_compliance_required: false,
        export_compliance_encryption_updated: false,
        export_compliance_app_type: nil,
        export_compliance_uses_encryption: false,
        export_compliance_is_exempt: false,
        export_compliance_contains_third_party_cryptography: false,
        export_compliance_contains_proprietary_cryptography: false
      }
    )
  end

  # Error handling and cleanup
  error do |lane, exception, options|
    # Secure error logging
    secure_error_log(lane, exception)
    
    # Cleanup sensitive data
    cleanup_security_context
    
    # Notify team securely
    notify_failure(exception)
  end

  after_all do |lane, options|
    # Cleanup and security verification
    cleanup_security_context
    
    # Generate security reports
    generate_security_reports
    
    # Notify success securely
    notify_success(lane)
  end
end

# Private helper methods
private

def validate_security_compliance
  sh("security-scan --timeout #{SECURITY_SCAN_TIMEOUT}")
  sh("compliance-check --timeout #{COMPLIANCE_CHECK_TIMEOUT}")
end

def verify_test_coverage
  require 'xcov'
  xcov(
    workspace: WORKSPACE,
    scheme: SCHEME,
    output_directory: "coverage_output",
    minimum_coverage_percentage: MIN_TEST_COVERAGE
  )
end

def build_secure_ipa(options)
  gym(
    workspace: options[:workspace],
    scheme: options[:scheme],
    clean: true,
    export_method: options[:export_method],
    export_options: options[:export_options],
    include_symbols: true,
    include_bitcode: true,
    xcargs: "COMPILER_INDEX_STORE_ENABLE=NO"
  )
end

def verify_full_compliance
  # HIPAA compliance check
  sh("hipaa-compliance-check")
  
  # Security requirements verification
  sh("security-requirements-check")
  
  # App Store guidelines validation
  precheck(
    app_identifier: CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier)
  )
end

def cleanup_security_context
  delete_keychain(name: "build_keychain") if is_ci
  clear_derived_data
end

def generate_security_reports
  # Generate security audit report
  sh("security-audit-report")
  
  # Generate compliance report
  sh("compliance-report")
end