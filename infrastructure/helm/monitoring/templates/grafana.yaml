# Grafana Helm Chart Template for AUSTA SuperApp Platform
# Version: 10.0.0
# Dependencies:
# - grafana/grafana@10.0.0
# - @grafana/piechart-panel@2.0.0
# - @grafana/worldmap-panel@1.0.0

{{- define "grafana.config" -}}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-grafana-config
  namespace: {{ .Release.Namespace }}
  labels:
    app: grafana
    chart: {{ .Chart.Name }}
    release: {{ .Release.Name }}
data:
  grafana.ini: |
    [server]
    protocol = https
    domain = grafana.austa-superapp.com
    root_url = %(protocol)s://%(domain)s/
    cert_file = /etc/grafana/certs/tls.crt
    cert_key = /etc/grafana/certs/tls.key
    enforce_domain = true

    [security]
    admin_user = ${GRAFANA_ADMIN_USER}
    admin_password = ${GRAFANA_ADMIN_PASSWORD}
    secret_key = ${GRAFANA_SECRET_KEY}
    disable_gravatar = true
    cookie_secure = true
    strict_transport_security = true
    content_security_policy = true
    x_content_type_options = true
    x_xss_protection = true
    allow_embedding = false

    [auth]
    disable_login_form = false
    oauth_auto_login = true
    oauth_allow_insecure_email_lookup = false
    disable_signout_menu = false
    signout_redirect_url = /logout
    login_maximum_inactive_lifetime_duration = 7d
    login_maximum_lifetime_duration = 30d

    [auth.generic_oauth]
    enabled = true
    name = OAuth
    allow_sign_up = true
    client_id = ${OAUTH_CLIENT_ID}
    client_secret = ${OAUTH_CLIENT_SECRET}
    scopes = openid profile email
    auth_url = ${OAUTH_AUTH_URL}
    token_url = ${OAUTH_TOKEN_URL}
    api_url = ${OAUTH_API_URL}
    role_attribute_path = contains(groups[*], 'admin') && 'Admin' || contains(groups[*], 'editor') && 'Editor' || 'Viewer'

    [auth.mfa]
    enabled = true
    grace_period = 2d

    [users]
    default_theme = dark
    auto_assign_org = true
    auto_assign_org_role = Viewer
    verify_email_enabled = true
    login_hint = Use your AUSTA credentials

    [analytics]
    reporting_enabled = false
    check_for_updates = true

    [dashboards]
    versions_to_keep = 20
    min_refresh_interval = 5s

    [unified_alerting]
    enabled = true
    execute_alerts = true
    evaluation_timeout = 30s
    max_attempts = 3

    [alerting]
    enabled = true
    execute_alerts = true
    error_or_timeout = alerting
    nodata_or_nullvalues = alerting
    concurrent_render_limit = 5

    [metrics]
    enabled = true
    basic_auth_username = ${METRICS_USER}
    basic_auth_password = ${METRICS_PASSWORD}

    [log]
    mode = console file
    level = info
    filters = alerting:debug oauth:debug

    [log.frontend]
    enabled = true
    
    [auditing]
    enabled = true
    log_path = /var/log/grafana/audit.log
    max_files = 5
    max_file_size_mb = 100
{{- end }}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-grafana
  namespace: {{ .Release.Namespace }}
  labels:
    app: grafana
    chart: {{ .Chart.Name }}
    release: {{ .Release.Name }}
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: grafana
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: grafana
        release: {{ .Release.Name }}
      annotations:
        checksum/config: {{ include "grafana.config" . | sha256sum }}
        prometheus.io/scrape: "true"
        prometheus.io/port: "3000"
    spec:
      securityContext:
        fsGroup: 472
        runAsUser: 472
        runAsNonRoot: true
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - grafana
              topologyKey: kubernetes.io/hostname
      containers:
      - name: grafana
        image: "grafana/grafana:10.0.0"
        imagePullPolicy: IfNotPresent
        ports:
        - name: http
          containerPort: 3000
          protocol: TCP
        env:
        - name: GF_SECURITY_ADMIN_USER
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}-grafana-credentials
              key: admin-user
        - name: GF_SECURITY_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}-grafana-credentials
              key: admin-password
        volumeMounts:
        - name: config
          mountPath: /etc/grafana/grafana.ini
          subPath: grafana.ini
        - name: storage
          mountPath: /var/lib/grafana
        - name: dashboards
          mountPath: /var/lib/grafana/dashboards
        - name: certificates
          mountPath: /etc/grafana/certs
        - name: audit-logs
          mountPath: /var/log/grafana
        resources:
          limits:
            cpu: 500m
            memory: 1Gi
          requests:
            cpu: 250m
            memory: 512Mi
        livenessProbe:
          httpGet:
            path: /api/health
            port: 3000
            scheme: HTTPS
          initialDelaySeconds: 60
          timeoutSeconds: 30
          failureThreshold: 10
        readinessProbe:
          httpGet:
            path: /api/health
            port: 3000
            scheme: HTTPS
          initialDelaySeconds: 30
          timeoutSeconds: 30
          failureThreshold: 3
      volumes:
      - name: config
        configMap:
          name: {{ .Release.Name }}-grafana-config
      - name: storage
        persistentVolumeClaim:
          claimName: {{ .Release.Name }}-grafana-storage
      - name: dashboards
        configMap:
          name: {{ .Release.Name }}-grafana-dashboards
      - name: certificates
        secret:
          secretName: {{ .Release.Name }}-grafana-certs
      - name: audit-logs
        persistentVolumeClaim:
          claimName: {{ .Release.Name }}-grafana-audit-logs

---
apiVersion: v1
kind: Service
metadata:
  name: {{ .Release.Name }}-grafana
  namespace: {{ .Release.Namespace }}
  labels:
    app: grafana
    chart: {{ .Chart.Name }}
    release: {{ .Release.Name }}
spec:
  type: ClusterIP
  ports:
  - port: 3000
    targetPort: http
    protocol: TCP
    name: http
  selector:
    app: grafana
    release: {{ .Release.Name }}

---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: {{ .Release.Name }}-grafana-network-policy
  namespace: {{ .Release.Namespace }}
spec:
  podSelector:
    matchLabels:
      app: grafana
      release: {{ .Release.Name }}
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: monitoring
    ports:
    - protocol: TCP
      port: 3000
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          name: monitoring
    ports:
    - protocol: TCP
      port: 9090

---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: {{ .Release.Name }}-grafana
  namespace: {{ .Release.Namespace }}
  labels:
    app: grafana
    release: {{ .Release.Name }}
spec:
  selector:
    matchLabels:
      app: grafana
      release: {{ .Release.Name }}
  endpoints:
  - port: http
    scheme: https
    tlsConfig:
      insecureSkipVerify: false
      certFile: /etc/grafana/certs/tls.crt
      keyFile: /etc/grafana/certs/tls.key
    interval: 30s
    scrapeTimeout: 30s
    path: /metrics

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: {{ .Release.Name }}-grafana-pdb
  namespace: {{ .Release.Namespace }}
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: grafana
      release: {{ .Release.Name }}