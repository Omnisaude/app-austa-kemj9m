# Claims Service Helm Chart Values
# Version: 2.0.0
# Enhanced configuration for high-availability claims processing service

# Core deployment settings
replicaCount: 3

image:
  repository: austa-superapp/claims-service
  tag: latest
  pullPolicy: Always

# Service configuration
service:
  type: ClusterIP
  port: 3003
  metrics:
    port: 9090
    path: /metrics

# Resource allocation with optimized settings for claims processing
resources:
  requests:
    cpu: 200m
    memory: 256Mi
  limits:
    cpu: 500m
    memory: 512Mi

# Enhanced autoscaling configuration for event-driven workloads
autoscaling:
  enabled: true
  minReplicas: 3
  maxReplicas: 10
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 80
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
        - type: Pods
          value: 2
          periodSeconds: 60
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
        - type: Pods
          value: 1
          periodSeconds: 120

# Enhanced security settings
security:
  podSecurityContext:
    fsGroup: 2000
    runAsNonRoot: true
    seccompProfile:
      type: RuntimeDefault
  containerSecurityContext:
    runAsNonRoot: true
    runAsUser: 1000
    allowPrivilegeEscalation: false
    readOnlyRootFilesystem: true
    capabilities:
      drop:
        - ALL
  networkPolicy:
    enabled: true
    ingress:
      - from:
          - podSelector:
              matchLabels:
                app: austa-superapp
        - from:
          - namespaceSelector:
              matchLabels:
                name: monitoring

# Comprehensive monitoring configuration
monitoring:
  enabled: true
  serviceMonitor:
    enabled: true
    interval: 15s
    endpoints:
      - port: metrics
        path: /metrics
        interval: 15s
  alerts:
    enabled: true
    rules:
      - alert: HighErrorRate
        expr: sum(rate(claims_errors_total[5m])) > 0.01
        for: 5m
        severity: warning
      - alert: SlowResponseTime
        expr: histogram_quantile(0.95, sum(rate(claims_processing_duration_seconds_bucket[5m]))) > 0.5
        for: 5m
        severity: warning

# Claims service specific configuration
claims:
  config:
    maxConcurrentClaims: 100
    processingTimeoutMs: 30000
    batchSize: 50
    retryAttempts: 3
    retryDelayMs: 1000
  compliance:
    hipaaEnabled: true
    lgpdEnabled: true
    dataRetentionDays: 2555
    auditFrequencyHours: 24
    requiredEncryption: true

# Database configuration using Bitnami PostgreSQL chart
postgresql:
  enabled: true
  auth:
    database: claims_db
    username: claims_user
  primary:
    persistence:
      size: 10Gi
    resources:
      requests:
        cpu: 200m
        memory: 256Mi
      limits:
        cpu: 500m
        memory: 512Mi
  metrics:
    enabled: true
    serviceMonitor:
      enabled: true

# Redis configuration for caching and queue management
redis:
  enabled: true
  architecture: replication
  auth:
    enabled: true
  master:
    persistence:
      size: 5Gi
  replica:
    replicaCount: 2
  metrics:
    enabled: true
    serviceMonitor:
      enabled: true

# Ingress configuration
ingress:
  enabled: true
  className: nginx
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, OPTIONS"
    nginx.ingress.kubernetes.io/enable-cors: "true"
  hosts:
    - host: claims.austa-superapp.com
      paths:
        - path: /
          pathType: Prefix

# Affinity and anti-affinity rules
affinity:
  podAntiAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        podAffinityTerm:
          labelSelector:
            matchExpressions:
              - key: app
                operator: In
                values:
                  - claims-service
          topologyKey: kubernetes.io/hostname

# Tolerations for node scheduling
tolerations:
  - key: "claims-processing"
    operator: "Equal"
    value: "true"
    effect: "NoSchedule"

# Pod disruption budget for high availability
podDisruptionBudget:
  enabled: true
  minAvailable: 2